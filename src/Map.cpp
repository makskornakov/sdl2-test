#include "Map.h"
#include "TextureManager.h"

// int lvl1[20][25] = {
//     {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
//     {1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 1},
//     {1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 3, 3, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 3, 2, 3, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 1},
//     {1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 1, 0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 1},
//     {1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1}};

// only 0, 1, 2 are valid
int lvl1[20][25] = {
    // create with 0s
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

Map::Map()
{
  dirt = TextureManager::LoadTexture("../Resources/Tiles/dirt.png");
  grass = TextureManager::LoadTexture("../Resources/Tiles/grass.png");
  water = TextureManager::LoadTexture("../Resources/Tiles/water.png");

  LoadMap(lvl1);

  // print lvl1 column number and row number
  std::cout << "lvl1 column number: " << sizeof(lvl1[0]) / sizeof(lvl1[0][0]) << std::endl;
  std::cout << "lvl1 row number: " << sizeof(lvl1) / sizeof(lvl1[0]) << std::endl;

  src.x = src.y = 0;
  src.w = dest.w = 32;
  src.h = dest.h = 32;

  dest.x = dest.y = 0;
}

void Map::LoadMap(int arr[20][25])
{
  for (int row = 0; row < 20; row++)
  {
    for (int column = 0; column < 25; column++)
    {
      map[row][column] = arr[row][column];
    }
  }
}

void Map::DrawMap()
{
  int type = 0;

  for (int row = 0; row < 20; row++)
  {
    for (int column = 0; column < 25; column++)
    {
      type = map[row][column];

      dest.x = column * 32;
      dest.y = row * 32;

      switch (type)
      {
      case 0:
        TextureManager::Draw(water, src, dest);
        break;
      case 1:
        TextureManager::Draw(dirt, src, dest);
        break;
      case 2:
        TextureManager::Draw(grass, src, dest);
        break;
      default:
        break;
      }
    }
  }
}